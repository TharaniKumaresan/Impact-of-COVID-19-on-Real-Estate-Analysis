# -*- coding: utf-8 -*-
"""ML_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QOYGkaR89PmuEH1akaA670bIhcz6NKI9
"""

import os
from google.colab import drive
drive.mount("/content/drive")
DATA_DIR = '/content/drive/My Drive/KDD_DataSet'

from sklearn.datasets import load_boston
from keras.models import Sequential
from keras.layers import Dense, Conv1D, Flatten
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler, StandardScaler

df = pd.read_csv(DATA_DIR + '/weekly_housing_market_data_most_recent.tsv', sep='\t')

def type_converted(dt):
  y = pd.to_datetime(dt).date().year
  m = pd.to_datetime(dt).date().month
  d = pd.to_datetime(dt).date().day
  d1 = str(y) + str(m) + str(d)
  return int(d1)

def get_formatted_data(filtered_df):
  filtered_df.period_begin = pd.to_datetime(df.period_begin)
  filtered_df['period_begin'] = filtered_df['period_begin'].apply(lambda x: x.value)
  filtered_df.period_end = pd.to_datetime(df.period_end)
  filtered_df['period_end'] = filtered_df['period_end'].apply(lambda x: x.value)
  return filtered_df

cleaned_df = df[["period_begin","period_end","region_name","region_type","pending_sales", "total_new_listings", "total_homes_sold", "median_sale_price", "off_market_in_one_week", "inventory", "price_drops"]]
filtered_df = cleaned_df[(cleaned_df['region_name']=='Boston, MA metro area') & (cleaned_df['region_type'] == "metro")]
filtered_df.drop(columns=['region_name', 'region_type'])
data = get_formatted_data(filtered_df)

data = data.drop(["region_name", "region_type"], axis=1)
data = data.dropna()
x = data.iloc[:,:2].values
y = data.iloc[:,2:].values
sc = MinMaxScaler(feature_range = (0, 1))
x = sc.fit_transform(x)
y = sc.fit_transform(y)
x.shape, y.shape

xtrain, xtest, ytrain, ytest=train_test_split(x, y, test_size=0.20, shuffle=False)

from tensorflow.keras.optimizers import Adam
nn = tf.keras.models.Sequential()
nn.add(tf.keras.layers.Dense(units=6, activation='relu'))
nn.add(tf.keras.layers.Dense(units=10, activation='relu'))
nn.add(tf.keras.layers.Dense(units=50, activation='relu'))
nn.add(tf.keras.layers.Dense(units=30, activation='relu'))
nn.add(tf.keras.layers.Dense(units=10, activation='relu'))
#output
nn.add(tf.keras.layers.Dense(units=7))
#compile 
nn.compile(optimizer =Adam(learning_rate=0.001), loss='mean_squared_error', metrics = ['accuracy','mse'])

xtrain.shape, ytrain.shape
nn.fit(xtrain, ytrain, batch_size=32, epochs=500)

ypred = nn.predict(xtest)
ypred = sc.inverse_transform(ypred)
ytest = sc.inverse_transform(ytest)

x_axis = []
p_ps = []
t_ps = []
plt.figure(figsize=(18,10))

for i in range(len(ypred)):
  x_axis.append(i)
  p_ps.append(ypred[i][0])
  t_ps.append(ytest[i][0])
plt.plot(x_axis, p_ps, color = 'red', label='predicted pending sales')
plt.plot(x_axis, t_ps, label ='actual pending sales')
plt.xlabel("Time")
plt.ylabel("pending sales")
plt.axis([0, 50, 100, 2000])
plt.legend()
plt.show()

x_axis = []
p_ps = []
t_ps = []
plt.figure(figsize=(18,10))

for i in range(len(ypred)):
  x_axis.append(i)
  p_ps.append(ypred[i][1])
  t_ps.append(ytest[i][1])
plt.plot(x_axis, p_ps, color = 'red', label='predicted total_new_listings')
plt.plot(x_axis, t_ps, label ='Actual total_new_listings')
plt.xlabel("Time")
plt.ylabel("pending sales")
plt.legend()
plt.axis([0, 50, 2000, 25000])
plt.show()

x_axis = []
p_ps = []
t_ps = []
plt.figure(figsize=(18,10))

for i in range(len(ypred)):
  x_axis.append(i)
  p_ps.append(ypred[i][2])
  t_ps.append(ytest[i][2])
plt.plot(x_axis, p_ps, color = 'red', label='predicted total homes sold')
plt.plot(x_axis, t_ps, label ='actual total homes sold')
plt.xlabel("Time")
plt.ylabel("pending sales")
plt.axis([0, 50, 2000, 20000])
plt.legend()
plt.show()

x_axis = []
p_ps = []
t_ps = []
plt.figure(figsize=(18,10))

for i in range(len(ypred)):
  x_axis.append(i)
  p_ps.append(ypred[i][3])
  t_ps.append(ytest[i][3])
plt.plot(x_axis, p_ps, color = 'red', label='predicted median sale price')
plt.plot(x_axis, t_ps, label ='actual median sale price')
plt.axis([0, 50, 350000, 650000])
plt.xlabel("Time")
plt.ylabel("pending sales")
plt.legend()
plt.show()

x_axis = []
p_ps = []
t_ps = []
plt.figure(figsize=(18,10))

for i in range(len(ypred)):
  x_axis.append(i)
  p_ps.append(ypred[i][4])
  t_ps.append(ytest[i][4])
plt.plot(x_axis, p_ps, color = 'red', label='predicted off market in one week')
plt.plot(x_axis, t_ps, label ='actual off market in one week')
plt.axis([0, 50, 0, 800])
plt.xlabel("Time")
plt.ylabel("pending sales")
plt.legend()
plt.show()

x_axis = []
p_ps = []
t_ps = []
plt.figure(figsize=(18,10))

for i in range(len(ypred)):
  x_axis.append(i)
  p_ps.append(ypred[i][5])
  t_ps.append(ytest[i][5])
plt.plot(x_axis, p_ps, color = 'red', label='predicted inventory')
plt.plot(x_axis, t_ps, label ='actual inventory')
plt.axis([0, 50, 3000, 11000])
plt.xlabel("Time")
plt.ylabel("pending sales")
plt.legend()
plt.show()

x_axis = []
p_ps = []
t_ps = []
plt.figure(figsize=(18,10))

for i in range(len(ypred)):
  x_axis.append(i)
  p_ps.append(ypred[i][6])
  t_ps.append(ytest[i][6])
plt.plot(x_axis, p_ps, color = 'red', label='predicted price drops')
plt.plot(x_axis, t_ps, label ='actual price drops')
plt.axis([0, 50, 0, 1000])
plt.xlabel("Time")
plt.ylabel("pending sales")
plt.legend()
plt.show()